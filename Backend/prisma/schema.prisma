generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int       @id @default(autoincrement())
  name       String
  email      String    @unique
  password   String
  bookings   Booking[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Movie {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  duration    Int       // in minutes
  shows       Show[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Theatre {
  id        Int       @id @default(autoincrement())
  name      String
  location  String
  screens   Screen[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Screen {
  id         Int       @id @default(autoincrement())
  name       String
  theatre    Theatre   @relation(fields: [theatreId], references: [id])
  theatreId  Int
  seats      Seat[]
  shows      Show[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Seat {
  id          Int          @id @default(autoincrement())
  seatNo      String       // e.g. "A1", "B5"
  screen      Screen       @relation(fields: [screenId], references: [id])
  screenId    Int
  bookedSeats BookedSeat[] // ↩️ reverse relation for BookedSeat
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Show {
  id          Int       @id @default(autoincrement())
  movie       Movie     @relation(fields: [movieId], references: [id])
  movieId     Int
  screen      Screen    @relation(fields: [screenId], references: [id])
  screenId    Int
  startTime   DateTime
  endTime     DateTime
  bookings    Booking[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Booking {
  id          Int           @id @default(autoincrement())
  user        User          @relation(fields: [userId], references: [id])
  userId      Int
  show        Show          @relation(fields: [showId], references: [id])
  showId      Int
  bookingTime DateTime      @default(now())
  status      BookingStatus @default(PENDING)
  totalPrice  Float
  bookedSeats BookedSeat[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model BookedSeat {
  id         Int      @id @default(autoincrement())
  booking    Booking  @relation(fields: [bookingId], references: [id])
  bookingId  Int
  seat       Seat     @relation(fields: [seatId], references: [id])
  seatId     Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([bookingId, seatId]) // no duplicate seat in one booking
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}
